import unittest
import requests

BASE_URL = "http://127.0.0.1:5000"

class TestAPI(unittest.TestCase):
    # Testes para professores (10 testes)
    def test_get_professores(self):
        response = requests.get(f"{BASE_URL}/professores")
        self.assertEqual(response.status_code, 200)
    
    def test_add_professor(self):
        novo_professor = {"id": 3, "nome": "Prof. Carlos", "idade": 45, "materia": "Física", "observacoes": "Especialista em mecânica"}
        response = requests.post(f"{BASE_URL}/professores", json=novo_professor)
        self.assertEqual(response.status_code, 201)
    
    def test_add_professor_invalido(self):
        response = requests.post(f"{BASE_URL}/professores", json={"nome": "Prof. Pedro"})
        self.assertEqual(response.status_code, 400)
    
    def test_update_professor(self):
        update_data = {"nome": "Prof. João Silva", "idade": 41}
        response = requests.put(f"{BASE_URL}/professores/1", json=update_data)
        self.assertIn(response.status_code, [200, 404])
    
    def test_update_professor_inexistente(self):
        response = requests.put(f"{BASE_URL}/professores/99", json={"nome": "Prof. Inexistente"})
        self.assertEqual(response.status_code, 404)
    
    def test_delete_professor(self):
        response = requests.delete(f"{BASE_URL}/professores/1")
        self.assertIn(response.status_code, [200, 404])
    
    def test_delete_professor_inexistente(self):
        response = requests.delete(f"{BASE_URL}/professores/99")
        self.assertEqual(response.status_code, 404)
    
    def test_get_professor_por_id(self):
        response = requests.get(f"{BASE_URL}/professores/1")
        self.assertIn(response.status_code, [200, 404])
    
    def test_add_professor_sem_idade(self):
        response = requests.post(f"{BASE_URL}/professores", json={"id": 4, "nome": "Prof. Sem Idade"})
        self.assertEqual(response.status_code, 400)
    
    def test_delete_todos_professores(self):
        response = requests.delete(f"{BASE_URL}/professores")
        self.assertIn(response.status_code, [200, 404])
    
    # Testes para turmas (10 testes)
    def test_get_turmas(self):
        response = requests.get(f"{BASE_URL}/turmas")
        self.assertEqual(response.status_code, 200)
    
    def test_add_turma(self):
        nova_turma = {"id": 3, "descricao": "Turma 3C", "professor_id": 1, "ativo": True}
        response = requests.post(f"{BASE_URL}/turmas", json=nova_turma)
        self.assertEqual(response.status_code, 201)
    
    def test_get_turma_por_id(self):
        response = requests.get(f"{BASE_URL}/turmas/1")
        self.assertIn(response.status_code, [200, 404])
    
    def test_update_turma(self):
        update_data = {"descricao": "Turma 3C Atualizada"}
        response = requests.put(f"{BASE_URL}/turmas/1", json=update_data)
        self.assertIn(response.status_code, [200, 404])
    
    def test_delete_turma(self):
        response = requests.delete(f"{BASE_URL}/turmas/1")
        self.assertIn(response.status_code, [200, 404])
    
    def test_add_turma_invalida(self):
        response = requests.post(f"{BASE_URL}/turmas", json={"descricao": "Turma sem professor"})
        self.assertEqual(response.status_code, 400)
    
    def test_update_turma_inexistente(self):
        response = requests.put(f"{BASE_URL}/turmas/99", json={"descricao": "Turma Fantasma"})
        self.assertEqual(response.status_code, 404)
    
    def test_delete_turma_inexistente(self):
        response = requests.delete(f"{BASE_URL}/turmas/99")
        self.assertEqual(response.status_code, 404)
    
    def test_desativar_turma(self):
        response = requests.put(f"{BASE_URL}/turmas/1", json={"ativo": False})
        self.assertIn(response.status_code, [200, 404])
    
    def test_get_turmas_ativas(self):
        response = requests.get(f"{BASE_URL}/turmas?ativo=True")
        self.assertEqual(response.status_code, 200)
    
    # Testes para alunos (10 testes)
    def test_get_alunos(self):
        response = requests.get(f"{BASE_URL}/alunos")
        self.assertEqual(response.status_code, 200)
    
    def test_add_aluno(self):
        novo_aluno = {"id": 3, "nome": "Pedro", "idade": 14, "turma_id": 1, "data_nascimento": "2010-05-10", "nt_prim_sem": 9, "nt_seg_sem": 8.5, "media_final": 8.75}
        response = requests.post(f"{BASE_URL}/alunos", json=novo_aluno)
        self.assertEqual(response.status_code, 201)
    
    def test_get_aluno_por_id(self):
        response = requests.get(f"{BASE_URL}/alunos/1")
        self.assertIn(response.status_code, [200, 404])
    
    def test_update_aluno(self):
        update_data = {"nome": "Pedro Atualizado"}
        response = requests.put(f"{BASE_URL}/alunos/1", json=update_data)
        self.assertIn(response.status_code, [200, 404])
    
    def test_delete_aluno(self):
        response = requests.delete(f"{BASE_URL}/alunos/1")
        self.assertIn(response.status_code, [200, 404])
    
    def test_add_aluno_invalido(self):
        response = requests.post(f"{BASE_URL}/alunos", json={"nome": "Aluno sem turma"})
        self.assertEqual(response.status_code, 400)
    
    def test_update_aluno_inexistente(self):
        response = requests.put(f"{BASE_URL}/alunos/99", json={"nome": "Aluno Fantasma"})
        self.assertEqual(response.status_code, 404)
    
    def test_delete_aluno_inexistente(self):
        response = requests.delete(f"{BASE_URL}/alunos/99")
        self.assertEqual(response.status_code, 404)
    
    def test_get_alunos_por_turma(self):
        response = requests.get(f"{BASE_URL}/alunos?turma_id=1")
        self.assertEqual(response.status_code, 200)

if __name__ == "__main__":
    unittest.main()
